//usr/bin/env root -l ${0}\(\""$*"\"\); exit $?

#include "getopt.h"

void usage() {
    std::cerr << "\n"
              << "USAGE: plotspectra gerda-fitter-*-histograms.root\n"
              << "\n"
              << "options:\n"
              << "  --help|-h        : print this help message and exit\n"
              << "  --logy|-l        : logarithmic Y axis\n"
              << "  --width|-x       : canvas width in pixels\n"
              << "  --height|-y      : canvas height in pixels\n"
              << "  --rebin|-r       : rebin factor\n"
              << "\n";
    gSystem->Exit(1);
}

void plotspectra(std::string args = "") {

    // this is for getopt to work
    args = "plotspectra " + args;

    int argc = 0;
    char** argv = new char*[50];

    // get all arguments
    std::istringstream iss(args);
    std::string word;
    while (iss >> word) {
        char* tmp = new char[50];
        strcpy(tmp, word.c_str());
        argv[argc] = tmp;
        argc++;
    }

    const char* const short_opts = "x:y:r:lh";
    const option long_opts[] = {
        {"width",  required_argument, nullptr, 'x'},
        {"height", required_argument, nullptr, 'y'},
        {"rebin",  required_argument, nullptr, 'r'},
        {"logy",   no_argument,       nullptr, 'l'},
        {"help",   no_argument,       nullptr, 'h'},
        {nullptr,  no_argument,       nullptr, 0  }
    };

    // defaults
    int width = 1000;
    int height = 600;
    int rebin = 1;
    bool logy = false;

    // read in with getopt
    int opt = 0;
    while ((opt = getopt_long(argc, argv, short_opts, long_opts, nullptr)) != -1) {
        switch (opt) {
            case 'x':
                width = std::stoi(optarg);
                break;
            case 'y':
                height = std::stoi(optarg);
                break;
            case 'r':
                rebin = std::stoi(optarg);
                break;
            case 'l':
                logy = true;
                break;
            case 'h': // -h or --help
            case '?': // Unrecognized option
            default:
                usage();
        }
    }

    // get extra arguments
    std::vector<std::string> extra_args;
    for(; optind < argc; optind++){
        extra_args.emplace_back(argv[optind]);
    }

    if (extra_args.empty()) usage();

    auto tf = new TFile(extra_args[0].c_str(), "read");

    // loop over keys 
    TIter next(tf->GetListOfKeys());
    TKey* key;
    int idx = 0;
    while ((key = dynamic_cast<TKey*>(next()))) {
        auto cl = TClass::GetClass(key->GetClassName());
        if (cl->InheritsFrom(TDirectoryFile::Class())) {
            auto d = dynamic_cast<TDirectoryFile*>(key->ReadObj());
            auto data = dynamic_cast<TH1*>(d->Get("fitted_data"));
            auto model = dynamic_cast<TH1*>(d->Get("total_model"));
            auto range_low = dynamic_cast<TParameter<double>*>(d->Get("fit_range_lower"));
            auto range_upp = dynamic_cast<TParameter<double>*>(d->Get("fit_range_upper"));

            data->SetFillStyle(3003);
            data->SetLineColorAlpha(kAzure-4, 1);
            data->SetFillColorAlpha(kAzure-4, 1);
            model->SetLineColor(kRed);
            model->SetLineWidth(2);

            auto canvas = new TCanvas(Form("c_%i", idx), Form("c_%i", idx), width, height);
            canvas->SetMargin(0.04, 0.01, 0.07, 0.07);
            data->Draw("hist");
            if (logy) gPad->SetLogy();
            // draw comp
            TIter nextt(d->GetListOfKeys());
            TKey* keyy;
            while ((keyy = dynamic_cast<TKey*>(nextt()))) {
                auto cll = TClass::GetClass(keyy->GetClassName());
                if (cll->InheritsFrom(TH1::Class())) {
                    auto h = dynamic_cast<TH1*>(keyy->ReadObj());
                    h->SetLineColor(kGray+1);
                    h->Rebin(rebin);
                    h->Draw("hist same");
                }
            }
            data->Rebin(rebin);
            if (range_low and range_upp) data->GetXaxis()->SetRangeUser(range_low->GetVal(), range_upp->GetVal());
            data->Draw("hist same");
            model->Rebin(rebin);
            model->Draw("hist same");
        }
        idx++;
    }
}

// vim: ft=cpp
